add2<- function(x, y){
x + y
}
add2(3,5)
above <- function(x,n){
use <- x>n
x[use]
}
x<-1:20
above(x,12)
above <- function(x,n=10){
use <- x>n
x[use]
}
above(x)
above(x,15)
columnmean <- function(y, removeNA= TRUE){
nc <- ncol(y)
means < numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
airquality
columnmean <- function(y, removeNA= TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
search()
make.power<- function(n){
pow <- function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(2)
square(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
printmessage <- funtion(x){
if(x>0){
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage <- funtion(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(3)
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#invisible(x)
}
printmessage(3)
printmessage(NA)
printmessage <- function(x){
if(is.na(x))
print("x is a missing value!")
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
printmessage <- function(x){
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
open.account <- function(total) {
list(
deposit = function(amount) {
if(amount <= 0)
stop("Deposits must be positive!\n")
total <<- total + amount
cat(amount, "deposited.  Your balance is", total, "\n\n")
},
withdraw = function(amount) {
if(amount > total)
stop("You don't have that much money!\n")
total <<- total - amount
cat(amount, "withdrawn.  Your balance is", total, "\n\n")
},
balance = function() {
cat("Your balance is", total, "\n\n")
}
)
}
peter <- open.account(100)
mm <- open.account(200)
peter$withdraw(30)
peter$balance()
mm$balance()
peter$withdraw(500)
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {
x
}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() {
inv
}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:8, 4, 4))
cacheSolve(my_matrix)
my_matrix
my_matrix <- makeCacheMatrix(matrix(1:8, 4, 2))
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:16, 4, 4))
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix <- makeCacheMatrix(matrix(1:16, 4, 4))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
cachedInv <- NULL ## initialize inverse
## set x in parent env with the desired value, if inverse is already set, get rid of it!
set <- function(userValue = matrix()) {
x <<- userValue
cachedInv <<- NULL
}
get <- function() x
##set inverse variable in parent env to desired value and return the value as a convenience
setInverse <- function(invVal) {
cachedInv <<- invVal
return(cachedInv)
}
getInverse  <- function() cachedInv
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## given the list variable from the first function, will first check to see if there's already a cached inverse and return
## otherwise will attempt to solve its inverse and set/return it
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...) { ##special matrix provided or create a test 2x2 matrix
## let's see if there's something there already
calculatedInverse <- x$getInverse()
##check if there's a cached value AND it's a matrix
if(!is.null(calculatedInverse) && is.matrix(calculatedInverse)) {
message("We found cached data and saved valuable cpus!!!")
return(calculatedInverse)
}
## otherwise get the matrix
matrixToSolve <- x$get()
## try to solve the matrix and catch errors and warnings
calculatedInverse <- tryCatch({
solve(matrixToSolve)
}, warning=function(w) {
message("This may not be the result you're looking for")
message(w)
}, error=function(e) {
message("Something went wrong solving your matrix")
message(e)
message("\n")
})
## whatever the case, set the value of the inverse (NULL if something went wrong)
message("Setting the value of inverse to:")
x$setInverse(calculatedInverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
cachedInv <- NULL ## initialize inverse
## set x in parent env with the desired value,
##if inverse is already set, get rid of it!
set <- function(userValue = matrix()) {
x <<- userValue
cachedInv <<- NULL
}
get <- function() {
x
}
##set inverse variable in parent env to desired value
##and return the value as a convenience
setInverse <- function(invVal) {
cachedInv <<- invVal
return(cachedInv)
}
getInverse  <- function() {
cachedInv
}
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## given the list variable from the first function, will first check
## to see if there's already a cached inverse and return
## otherwise will attempt to solve its inverse and set/return it
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...) { ##special matrix provided or create a test 2x2 matrix
## let's see if there's something there already
calculatedInverse <- x$getInverse()
##check if there's a cached value AND it's a matrix
if(!is.null(calculatedInverse) && is.matrix(calculatedInverse)) {
message("We found cached data and saved valuable cpus!!!")
return(calculatedInverse)
}
## otherwise get the matrix
matrixToSolve <- x$get()
## try to solve the matrix and catch errors and warnings
calculatedInverse <- tryCatch({
solve(matrixToSolve)
}, warning=function(w) {
message("This may not be the result you're looking for")
message(w)
}, error=function(e) {
message("Something went wrong solving your matrix")
message(e)
message("\n")
})
## whatever the case, set the value of the inverse (NULL if something went wrong)
message("Setting the value of inverse to:")
x$setInverse(calculatedInverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
getwd()
setwd("week3/ProgrammingAssignment2/ProgrammingAssignment2")
getwd()
## The followint two functions work in concert:
## makeCacheMatrix function caches value of inversed matrix
## cacheSolve function tries to calculate the inversed of a given matrix
## This function caches value of inversed matrix
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL ## initialize inverse
## set x in parent env with the desired value,
##if inverse is already set, get rid of it!
set <- function(newMatrix = matrix()) {
x <<- newMatrix
inversedMatrix <<- NULL
}
get <- function() {
x
}
##set inverse variable in parent env to desired value
##and return the value as a convenience
setInverse <- function(inversedValue) {
inversedMatrix <<- inversedValue
return(inversedMatrix)
}
getInverse  <- function() {
inversedMatrix
}
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## The following function will get a matrix as parameter
## Check if invesed matrx has been calculated and cached
## If not invesed matrix is cached, try to calculate the inversed matrix
## If the matrix is invesable, return the inversed matrix,
## Otherwise return null
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...) {
## Check if the inversed matrix already cached
inversedMatrix <- x$getInverse()
if(!is.null(inversedMatrix) && is.matrix(inversedMatrix)) {
message("Cached inversed matrix found.")
return(inversedMatrix)
}
## Otherwise calculate the inversed matrix
newMatrix <- x$get()
inversedMatrix <- tryCatch({
solve(newMatrix)
}, error=function(e) {
message("Error in solving matrix")
message(e)
message("\n")
})
## setting the value of the inversed matrix
message("Setting the value of the inversed matrix:")
x$setInverse(inversedMatrix)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
